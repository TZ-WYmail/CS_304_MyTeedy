pipeline {
    agent any
    environment {
        // Define environment variable
        // Jenkins credentials configuration
        DOCKER_HUB_CREDENTIALS = credentials('123456') // Docker Hub credentials ID stored in Jenkins
        // Docker Hub Repository's name
        DOCKER_IMAGE = 'woshitanzheng/teedy-app' // Your Docker Hub user name and Repository's name
        DOCKER_TAG = "${env.BUILD_NUMBER}" // Use build number as tag
    }
    stages {
        stage('Build') {
            steps {
                checkout scmGit(
                    branches: [[name: '*/master']],
                    extensions: [],
                    userRemoteConfigs: [[url: 'https://github.com/TZ-WYmail/CS_304_MyTeedy.git']] // Your GitHub Repository
                )
                sh 'mvn -B -DskipTests clean package'
            }
        }
        stage('Print Current User') {
            steps {
                script {
                    // 打印当前用户
                    sh 'whoami'
                }
            }
        }
        // Building Docker images
       stage('Building image') {
            steps {
                script {
                    sh "docker build -t ${env.DOCKER_IMAGE}:${env.DOCKER_TAG} ."
                }
            }
        }
        // Uploading Docker images into Docker Hub
        stage('Upload image') {
            steps {
                script {
                    // Sign in to Docker Hub
                    docker.withRegistry('https://registry.hub.docker.com', '123456') {
                        // Push image
                        docker.image("${env.DOCKER_IMAGE}:${env.DOCKER_TAG}").push()
                        // Optional: label latest
                        docker.image("${env.DOCKER_IMAGE}:${env.DOCKER_TAG}").push('latest')
                    }
                }
            }
        }
        // Running Docker container
        stage('Run containers') {
            steps {
                script {
                    // Define container names and ports
                    def containers = [
                        [ name: 'teedy-container-8081', port: 8081 ],
                        [ name: 'teedy-container-8082', port: 8082 ],
                        [ name: 'teedy-container-8083', port: 8083 ]
                    ]
                    
                    // Stop and remove containers if they exist
                    containers.each { container ->
                        sh "docker stop ${container.name} || true"
                        sh "docker rm ${container.name} || true"
                    }
                    
                    // Run containers
                    containers.each { container ->
                        docker.image("${env.DOCKER_IMAGE}:${env.DOCKER_TAG}").run(
                            "--name ${container.name} -d -p ${container.port}:8080"
                        )
                    }
                    
                    // Optional: list all teedy-containers
                    sh 'docker ps --filter "name=teedy-container"'
                }
            }
        }
    }
}
